import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";
import { config } from "dotenv";
config();

import path from "path";
import {writeFile, readFile} from "fs/promises";
import { JsonableValue } from "ts-jest";

const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const version = process.env.SYNCBUNDLEVERSION ?? "v???";
const lokiClientId = process.env.LOKIACCESSCLIENTID ?? "";
const lokiClientSecret = process.env.LOKIACCESSCLIENTSECRET ?? "";
const prod = process.argv[2] === "production";
const watch = process.argv[3] !== "false" && !prod;

const entry_point = "src/main.ts";

const context = await esbuild
    .context({
        banner: {
            js: banner,
        },
        entryPoints: [entry_point],
        bundle: true,
        external: [
            "snappy",
            "obsidian",
            "electron",
            "@codemirror/autocomplete",
            "@codemirror/closebrackets",
            "@codemirror/collab",
            "@codemirror/commands",
            "@codemirror/comment",
            "@codemirror/fold",
            "@codemirror/gutter",
            "@codemirror/highlight",
            "@codemirror/history",
            "@codemirror/language",
            "@codemirror/lint",
            "@codemirror/matchbrackets",
            "@codemirror/panel",
            "@codemirror/rangeset",
            "@codemirror/rectangular-selection",
            "@codemirror/search",
            "@codemirror/state",
            "@codemirror/stream-parser",
            "@codemirror/text",
            "@codemirror/tooltip",
            "@codemirror/view",
            ...builtins,
        ],
        format: "cjs",
        target: "es2020",
        logLevel: "info",
        sourcemap: prod ? false : "inline",
        treeShaking: true,
        minify: prod,
        outdir: "dist",
        metafile: true,
        define: {
            "globalThis.SYNCBUNDLEVERSION": `"${prod ? version : `${process.env.npm_package_version}-dev`}"`,
            "globalThis.SYNCBUNDLEENV": `"${prod ? "production" : "development"}"`,
            "globalThis.LOKIACCESSCLIENTID": `"${lokiClientId}"`,
            "globalThis.LOKIACCESSCLIENTSECRET": `"${lokiClientSecret}"`
        }
    });

if (prod || !watch) {
    const result = await context.rebuild();

    await writeFile("dist/meta.json", JSON.stringify(result.metafile, undefined, 2));
} else {
    await context.watch();
    process.exit(0);
}

// If dev lets make a dev manifest.json file.
const manifestFile = path.join("./manifest.json");
const data = await readFile(manifestFile, "utf-8");
const json = JSON.parse(data);

// Update version data.
json.version = prod ? version : `v${process.env.npm_package_version}-dev`;
await writeFile(path.join("dist", "manifest.json"), JSON.stringify(json, undefined, 2));
process.exit(0);